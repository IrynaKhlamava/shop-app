services:
  auth-db:
    image: postgres:15
    container_name: auth-db
    restart: always
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME}
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
    ports:
      - "${AUTH_DB_PORT_ON_HOST}:5432"
    networks:
      - backend
    volumes:
      - auth_pgdata:/var/lib/postgresql/data

  user-db:
    image: postgres:15
    container_name: user-db
    restart: always
    environment:
      POSTGRES_DB: ${USER_DB_NAME}
      POSTGRES_USER: ${USER_DB_USER}
      POSTGRES_PASSWORD: ${USER_DB_PASSWORD}
    ports:
      - "${USER_DB_PORT_ON_HOST}:5432"
    networks:
      - backend
    volumes:
      - user_pgdata:/var/lib/postgresql/data

  product-db:
    image: mongo:6
    container_name: product-db
    restart: always
    ports:
      - "${MONGO_PORT}:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_INITDB_DATABASE}
    volumes:
      - mongo_product_data:/data/db
    networks:
      - backend


  order-db:
    image: postgres:15
    container_name: order-db
    restart: always
    environment:
      POSTGRES_DB: ${ORDER_DB_NAME}
      POSTGRES_USER: ${ORDER_DB_USER}
      POSTGRES_PASSWORD: ${ORDER_DB_PASSWORD}
    ports:
      - "${ORDER_DB_PORT_ON_HOST}:5432"
    networks:
      - backend
    volumes:
      - order_pgdata:/var/lib/postgresql/data


  redis-auth:
    image: redis
    container_name: redis-auth-service
    restart: always
    ports:
      - "${AUTH_REDIS_PORT}:6379"
    command: [ "redis-server", "--requirepass", "${AUTH_REDIS_PASSWORD}" ]
    volumes:
      - redis_data:/data
    networks:
      - backend

  redis-order-service:
    image: redis
    container_name: redis-order-service
    restart: always
    ports:
      - "${ORDER_REDIS_PORT}:6379"
    command: [ "redis-server", "--requirepass", "${ORDER_REDIS_PASSWORD}" ]
    volumes:
      - redis_data:/data
    networks:
      - backend

  auth-service:
    build:
      context: ./auth-service
    image: shop-app-auth-service
    container_name: auth-service
    depends_on:
      - auth-db
      - redis-auth
      - kafka
    env_file:
      - ./auth-service/.env
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${AUTH_DB_HOST}:${AUTH_DB_PORT}/${AUTH_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${AUTH_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${AUTH_DB_PASSWORD}
      SPRING_REDIS_HOST: ${AUTH_REDIS_HOST}
      SPRING_REDIS_PORT: ${AUTH_REDIS_PORT}
      SPRING_REDIS_PASSWORD: ${AUTH_REDIS_PASSWORD}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
    ports:
      - "${AUTH_PORT}:8080"
    networks:
      - backend

  user-service:
    build:
      context: ./user-service
    image: shop-app-user-service
    container_name: user-service
    depends_on:
      - user-db
    env_file:
      - ./user-service/.env
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${USER_DB_HOST}:${USER_DB_PORT}/${USER_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${USER_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${USER_DB_PASSWORD}
    ports:
      - "${USER_PORT:-8082}:8080"
    networks:
      - backend

  product-service:
    build:
      context: ./product-service
    image: shop-app-product-service
    container_name: product-service
    depends_on:
      - product-db
      - kafka
    env_file:
      - ./product-service/.env
    ports:
      - "${PRODUCT_PORT}:8080"
    networks:
      - backend

  order-service:
    build:
      context: ./order-service
    image: shop-app-order-service
    container_name: order-service
    depends_on:
      - order-db
      - redis-order-service
      - kafka
    env_file:
      - ./order-service/.env
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${ORDER_DB_HOST}:${ORDER_DB_PORT}/${ORDER_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${ORDER_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${ORDER_DB_PASSWORD}
    ports:
      - "${ORDER_PORT}:8080"
    networks:
      - backend

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=${KAFKA_NODE_ID}
      - KAFKA_CFG_PROCESS_ROLES=${KAFKA_PROCESS_ROLES}
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=${KAFKA_CONTROLLER_QUORUM_VOTERS}
      - KAFKA_CFG_LISTENERS=${KAFKA_LISTENERS}
      - KAFKA_CFG_ADVERTISED_LISTENERS=${KAFKA_ADVERTISED_LISTENERS}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=${KAFKA_CONTROLLER_LISTENER_NAMES}
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - backend

  api-gateway:
    build:
      context: ./api-gateway
    image: shop-app-api-gateway
    container_name: api-gateway
    depends_on:
      - auth-service
      - user-service
      - product-service
      - order-service
    env_file:
      - ./api-gateway/.env
    ports:
      - "8085:8080"
    networks:
      - backend

networks:
  backend:

volumes:
  redis_data:
  order_pgdata:
  user_pgdata:
  mongo_product_data:
  auth_pgdata: